// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/dagstore (interfaces: Interface)

// Package mock_dagstore is a generated GoMock package.
package mock_dagstore

import (
	context "context"
	reflect "reflect"

	dagstore "github.com/filecoin-project/dagstore"
	mount "github.com/filecoin-project/dagstore/mount"
	shard "github.com/filecoin-project/dagstore/shard"
	gomock "github.com/golang/mock/gomock"
	index "github.com/ipld/go-car/v2/index"
	multihash "github.com/multiformats/go-multihash"
)

// MockDagStoreInterface is a mock of Interface interface.
type MockDagStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDagStoreInterfaceMockRecorder
}

// MockDagStoreInterfaceMockRecorder is the mock recorder for MockDagStoreInterface.
type MockDagStoreInterfaceMockRecorder struct {
	mock *MockDagStoreInterface
}

// NewMockDagStoreInterface creates a new mock instance.
func NewMockDagStoreInterface(ctrl *gomock.Controller) *MockDagStoreInterface {
	mock := &MockDagStoreInterface{ctrl: ctrl}
	mock.recorder = &MockDagStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDagStoreInterface) EXPECT() *MockDagStoreInterfaceMockRecorder {
	return m.recorder
}

// AcquireShard mocks base method.
func (m *MockDagStoreInterface) AcquireShard(arg0 context.Context, arg1 shard.Key, arg2 chan dagstore.ShardResult, arg3 dagstore.AcquireOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireShard", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcquireShard indicates an expected call of AcquireShard.
func (mr *MockDagStoreInterfaceMockRecorder) AcquireShard(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireShard", reflect.TypeOf((*MockDagStoreInterface)(nil).AcquireShard), arg0, arg1, arg2, arg3)
}

// AllShardsInfo mocks base method.
func (m *MockDagStoreInterface) AllShardsInfo() dagstore.AllShardsInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllShardsInfo")
	ret0, _ := ret[0].(dagstore.AllShardsInfo)
	return ret0
}

// AllShardsInfo indicates an expected call of AllShardsInfo.
func (mr *MockDagStoreInterfaceMockRecorder) AllShardsInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllShardsInfo", reflect.TypeOf((*MockDagStoreInterface)(nil).AllShardsInfo))
}

// Close mocks base method.
func (m *MockDagStoreInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDagStoreInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDagStoreInterface)(nil).Close))
}

// DestroyShard mocks base method.
func (m *MockDagStoreInterface) DestroyShard(arg0 context.Context, arg1 shard.Key, arg2 chan dagstore.ShardResult, arg3 dagstore.DestroyOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyShard", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyShard indicates an expected call of DestroyShard.
func (mr *MockDagStoreInterfaceMockRecorder) DestroyShard(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyShard", reflect.TypeOf((*MockDagStoreInterface)(nil).DestroyShard), arg0, arg1, arg2, arg3)
}

// GC mocks base method.
func (m *MockDagStoreInterface) GC(arg0 context.Context) (*dagstore.GCResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GC", arg0)
	ret0, _ := ret[0].(*dagstore.GCResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GC indicates an expected call of GC.
func (mr *MockDagStoreInterfaceMockRecorder) GC(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GC", reflect.TypeOf((*MockDagStoreInterface)(nil).GC), arg0)
}

// GetIterableIndex mocks base method.
func (m *MockDagStoreInterface) GetIterableIndex(arg0 shard.Key) (index.IterableIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIterableIndex", arg0)
	ret0, _ := ret[0].(index.IterableIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIterableIndex indicates an expected call of GetIterableIndex.
func (mr *MockDagStoreInterfaceMockRecorder) GetIterableIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIterableIndex", reflect.TypeOf((*MockDagStoreInterface)(nil).GetIterableIndex), arg0)
}

// GetShardInfo mocks base method.
func (m *MockDagStoreInterface) GetShardInfo(arg0 shard.Key) (dagstore.ShardInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardInfo", arg0)
	ret0, _ := ret[0].(dagstore.ShardInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShardInfo indicates an expected call of GetShardInfo.
func (mr *MockDagStoreInterfaceMockRecorder) GetShardInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardInfo", reflect.TypeOf((*MockDagStoreInterface)(nil).GetShardInfo), arg0)
}

// RecoverShard mocks base method.
func (m *MockDagStoreInterface) RecoverShard(arg0 context.Context, arg1 shard.Key, arg2 chan dagstore.ShardResult, arg3 dagstore.RecoverOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverShard", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverShard indicates an expected call of RecoverShard.
func (mr *MockDagStoreInterfaceMockRecorder) RecoverShard(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverShard", reflect.TypeOf((*MockDagStoreInterface)(nil).RecoverShard), arg0, arg1, arg2, arg3)
}

// RegisterShard mocks base method.
func (m *MockDagStoreInterface) RegisterShard(arg0 context.Context, arg1 shard.Key, arg2 mount.Mount, arg3 chan dagstore.ShardResult, arg4 dagstore.RegisterOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterShard", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterShard indicates an expected call of RegisterShard.
func (mr *MockDagStoreInterfaceMockRecorder) RegisterShard(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterShard", reflect.TypeOf((*MockDagStoreInterface)(nil).RegisterShard), arg0, arg1, arg2, arg3, arg4)
}

// ShardsContainingMultihash mocks base method.
func (m *MockDagStoreInterface) ShardsContainingMultihash(arg0 context.Context, arg1 multihash.Multihash) ([]shard.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardsContainingMultihash", arg0, arg1)
	ret0, _ := ret[0].([]shard.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShardsContainingMultihash indicates an expected call of ShardsContainingMultihash.
func (mr *MockDagStoreInterfaceMockRecorder) ShardsContainingMultihash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardsContainingMultihash", reflect.TypeOf((*MockDagStoreInterface)(nil).ShardsContainingMultihash), arg0, arg1)
}

// Start mocks base method.
func (m *MockDagStoreInterface) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockDagStoreInterfaceMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDagStoreInterface)(nil).Start), arg0)
}
